BattleClass::
import java.util.*;
public class BattleClass
{
    private static Scanner input = new Scanner(System.in);
    private static String cName;
    //Default Inventory
    private static String[] inventory = {"Health_Potion", "Damage_Potion", "empty"};
    private static String cClass;

    public static void main(String args[])
    {
        //Begins character creation
        characterCreation();
    }

    public static void characterCreation()
    {
        System.out.println("Enter in a character name:");
        cName = input.next();
        //Begins class selection
        classPicker();
    }

    public static void classPicker()
    {
        //Allows player to choose a class and look at a description (upgraded classes not yet available)
        int choice = 1;
        while(choice!= 0)
        {
            System.out.println("Choose a class: 1 For Mage, 2 For Warrior, 3 For Rogue");
            int classSpec = input.nextInt();
            if(classSpec == 1)
            {
                System.out.println("The mage is a spellcaster capabale of dealing high damage. However, the mage relies on a recourcse known as mana to help cast their spells. \nWithout mana the mage is helpless. A mage can upgrade into pyromancer or cryomancer. Is this your final choice? Enter 0 for yes or any other number for no.");
                choice = input.nextInt();
                if(choice != 0)
                {
                    System.out.println("Returning to class selection.");
                }
                else
                {
                    System.out.println("You are a wizard " + cName + "!");
                    cClass = "Mage";
                    Hero playerOne = new Mage(cName, 45, 35, 80, inventory);
                    System.out.println("And so begins the journey of " + cName + " the " + cClass + "!");
                    fightClub(playerOne);
                }
            }

            if(classSpec == 2)
            {
                System.out.println("The Warrior is a powerfull melee fighter capable of dealing critical hits for massive damage. Warrior can multiclass into palidin or barbarian. \nEnter 0 to confirm or any other number to return to class selection.");
                choice = input.nextInt();
                if(choice != 0)
                {
                    System.out.println("Returning to class selection.");
                }
                else
                {
                    cClass = "Warrior";
                    Hero playerOne = new Warrior(cName, 20, 5, 100, inventory);
                    System.out.println("And so begins the journey of " + cName + " the " + cClass + "!");
                    fightClub(playerOne);
                }
            }

            if(classSpec == 3)
            {
                System.out.println("The rogue is a quick fighter able of using speed to attack twice in one turn on the occasion. The rogue can multiclass into gunslinger or assasin. \nEnter 0 to select rogue as your class or enter another number to return to class selection.");
                choice = input.nextInt();
                if(choice != 0)
                {
                    System.out.println("Returning to class selection.");
                }
                else
                {
                    cClass = "Rogue";
                    Hero playerOne = new Rogue(cName, 30, 10, 95, inventory);
                    System.out.println("And so begins the journey of " + cName + " the " + cClass + "!");
                    fightClub(playerOne);
                }
            }
        }

    }

    public static void fightClub(Hero playerOne)
    {
        //Creates a random enemy and has the player repeatedly fight it
        System.out.println("Lets get ready to ruuuuuummmmmbbbbllllleeee!!!!!");
        int monster = (int) (Math.random() * 3.0);
        Player evil = new Player("PlaceHolder", 100, 100, 50);
        if(monster == 1)
        {
            evil = new Player("Troll", 30, 1, 150);
        }
        else if(monster == 2)
        {
            evil = new Player("Goblin", 20, 10, 70);
        }
        else
        {
            evil = new Player("Dark Night", 40, 10, 100);
        }

        while(playerOne.getHealth() > 0 && evil.getHealth() > 0)
        {

            if(playerOne.getHealth() > 0 && evil.getHealth() > 0)
            {
                playerOne.showInventory();
                System.out.println("What would you like to do: Enter in a inventory slot to use a item or another number to attack.");
                int choice = input.nextInt();
                if(choice == 1 || choice == 2 || choice == 3)
                {
                    playerOne.useItem(choice);
                }
                else
                {
                    playerOne.attack(evil);
                    //System.out.println("enemy has been attacked");
                }
            }
            if(playerOne.getHealth() > 0 && evil.getHealth() > 0)
            {

                evil.attack(playerOne);
                //System.out.println("PlayerOne has been attacked");
            }
        }
        
        //Continue or quit screen?
        if(playerOne.getHealth() > 0)
        {
            System.out.println("Would you like to continue? Enter 1 to continue, 2 to go to shop(coming soon!), or anything other number to quit");
            int response = input.nextInt();
            if(response == 1)
            {
                playerOne.setHealth(playerOne.ogHp);
                fightClub(playerOne);
            }
            else
            {
            System.out.println("Thank you for playing!");    
            }
        }
        else
        {
            System.out.println("You are defeated, try again? (y/n)");
            String response = input.next();
            if(response.equals("y"))
            {
                characterCreation();
            }
            else
            {
                System.out.println("Thank you for playing!");
            }
        }
        //System.out.println("Combat has ended");
    }
}

Player::

public class Player
{
    //Sets default values
    private String name;
    private int health = 100;
    private int minDamage = 20;
    private int maxDamage = 10;
    private int damageTaken = 0;
    
    public Player(String name, int maxDamage, int minDamage, int health)
    {
        this.maxDamage = maxDamage;
        this.minDamage = minDamage;
        this.health = health;
        this.name = name;
        //System.out.println(name);
    }

    
    public String getName()
    {
        return name;
    }
    
    public int getHealth()
    {
        return health;
    }
    
    public int getMinDamage()
    {
        return minDamage;
    }
    
    public int getMaxDamage()
    {
        return maxDamage;
    }
    
    public int getDamageTaken()
    {
        return damageTaken;
    }
    
    
    
    
    public void recieveDamage(int damageTaken)
    {
        setHealth(getHealth() - getDamageTaken());
        //Checks to see if enemy is dead and prevents overkill messages
        if(getHealth() < 0)
        {
            setHealth(0);
        }
        System.out.println(getName() + " has " + getHealth() + " health remaning!");
       
        if(getHealth() <= 0)
        {
            System.out.println(this.name + " has been defeated!");
        }
    }
    
    public void attack(Player enemy)
    {
        //Allows characters to deal eachother damage
        int damage = ((int)(Math.random() * (this.maxDamage - this.minDamage) + this.minDamage));
        enemy.setDamageTaken(damage);
        System.out.println(this.getName() + " has attacked " + enemy.getName() + " doing " + enemy.getDamageTaken() + " damage.");
        enemy.recieveDamage(getDamageTaken()); 
        //System.out.println(this.getName());
    }
    
    public void setHealth(int value)
    {
        health = value;
    }
    
    public void setMinDamage(int value)
    {
        minDamage = value;
    }
    
    public void setMaxDamage(int value)
    {
        maxDamage = value;
    }
    
    public void setDamageTaken(int value)
    {
        damageTaken = value;
    }
}

Warrior::

public class Warrior extends Hero
{
    //Default values
    private double critChance = 0.5; //Chance to deal double damage
    private int health = 100;
    private int maxDamage = 20;
    private int minDamage = 5;
    
    public Warrior(String name, int maxDamage, int minDamage, int health, String[] inventory)
    {
        super(name, maxDamage, minDamage, health, inventory);
        this.maxDamage = maxDamage;
        this.minDamage = minDamage;
        this.health = health;
        this.name = name;
        //System.out.println("Created!");
    }
    
    
    
    public void attack(Player enemy)
    {
        //Attack the enemy and check to see if hit a crit
        double critCheck = Math.random() * (1.0) + 0.0;
        if(critCheck >= critChance)
        {
        System.out.println("Your strike has landed a crit!");
        enemy.setDamageTaken(2 * ((int)(Math.random() * (maxDamage - minDamage + 1) + minDamage)));
        }
        else
        {
        enemy.setDamageTaken((int)(Math.random() * (maxDamage - minDamage + 1) + minDamage));
        }
        if(health > 0 && enemy.getHealth() > 0)
        {
        System.out.println(name + " has attacked " + enemy.getName() + " doing " + enemy.getDamageTaken() + " damage.");
        }
    
        enemy.recieveDamage(enemy.getDamageTaken());
        //if(health > 0 && enemy.getHealth() > 0)
        //{
            //System.out.println("The " + enemy.getName() + " has " + enemy.getHealth() + " remaining.");
        //}
    }
    
    public double getCritChance()
    {
        return critChance;
    }
    
    public void setCritChance(int value)
    {
        critChance = value;
    }
}

Hero::

public class Hero extends Player
{  
    String[] inventory;
    public String name;
    public int health = 100;
    public int ogHp = health;
    public int minDamage = 20;
    public int maxDamage = 40;
    
        
     public Hero(String name, int maxDamage, int minDamage, int health, String[] inventory)
    {
        super(name, maxDamage, minDamage, health);
        this.maxDamage = maxDamage;
        this.minDamage = minDamage;
        this.health = health;
        this.name = name;
        ogHp = health;
        this.inventory = inventory;
    }
       
        
        public void useItem(int slot)
        {
            //Uses item and sets slot to empty
            int place = slot - 1;
            if(inventory[place].equals("Health_Potion"))
            {
                int newHealth = getHealth() + 20;
                if(newHealth > ogHp)
                {
                setHealth(ogHp);
            }
            else
            {
                setHealth(newHealth);
            }
          System.out.println(getName() + " now has  " + getHealth() + " health.");
          inventory[place] = "empty";
        }
        else if(inventory[place].equals("Damage_Potion"))
        {
            setMaxDamage(getMaxDamage() + 10);
            inventory[place] = "empty";
            System.out.println(getName() + " can do more damge.");
        }
        else
        {
            System.out.println("That inventory slot is empty!");
        }
        
    }
    
    public void showInventory()
    {
        //Prints inventory effectively a toString method
        System.out.println("Your inventory holds: ");
        for(int i = 0; i < inventory.length; i++)
        {
            //System.out.println(name);
            System.out.print((i + 1) + ". " + inventory[i] + "; ");
        }
        System.out.println();
    }
}

Rogue::

public class Rogue extends Hero
{
    //Chance to attack a second time
    private double secondAttackChance = 0.3;
    
    
    public Rogue(String name, int maxDamage, int minDamage, int health, String[] inventory)
    {
        super(name, maxDamage, minDamage, health, inventory);
        this.maxDamage = maxDamage;
        this.minDamage = minDamage;
        this.health = health;
        this.name = name;
        System.out.println("Created");
    }
    
    public double getSecondAttackChance()
    {
        return secondAttackChance;
    }
    
    public void setSecondAttackChance(double value)
    {
        secondAttackChance = value;
    }
    
    
    public void attack(Player enemy)
    {
        //Attacks enemy and checks if attacks a second time
        enemy.setDamageTaken((int)(Math.random() * (getMaxDamage() - getMinDamage() + 1) + getMinDamage()));
        System.out.println(this.getName() + " has attacked " + enemy.getName() + " doing " + enemy.getDamageTaken() + " damage.");
        enemy.recieveDamage(enemy.getDamageTaken());
        if(enemy.getHealth() > 0)
        {
        //System.out.println("The " + enemy.getName() + " has " + enemy.getHealth() + " remaining.");
        }
        double secondAttackCheck = Math.random() * (1.0) + 0.0;
        if(secondAttackCheck < getSecondAttackChance() && enemy.getHealth() > 0)
        {
            System.out.println(getName() + "'s speed allows them to attack a second time!");
            //attack a second time
            enemy.setDamageTaken((int)(Math.random() * (getMaxDamage() - getMinDamage() + 1) + getMinDamage()));
        System.out.println(this.getName() + " has attacked " + enemy.getName() + " doing " + enemy.getDamageTaken() + " damage.");
        enemy.recieveDamage(enemy.getDamageTaken());
        if(enemy.getHealth() > 0)
        {
        System.out.println("The " + enemy.getName() + " has " + enemy.getHealth() + " remaining.");
        }
        }
    }
}

Mage::

public class Mage extends Hero
{
   private int mana = 180;
   private int health = 80;
   private int maxDamage = 45; 
   private int minDamage = 35;
   public boolean usesMana = true;
   
   public Mage(String name, int maxDamage, int minDamage, int health, String[] inventory)
    {
        super(name, maxDamage, minDamage, health, inventory);
        this.maxDamage = maxDamage;
        this.minDamage = minDamage;
        this.health = health;
        this.name = name;
        System.out.println("Created!");
        inventory[2] = "Mana_Potion";
    }
   
   public void attack(Player enemy)
   {
       //Attacks enemy and decreases mana by 10 for each attack
        if(mana >= 10)
        {
        enemy.setDamageTaken((int)(Math.random() * (maxDamage - minDamage) + minDamage));
        System.out.println(this.getName() + " has attacked " + enemy.getName() + " doing " + enemy.getDamageTaken() + " damage.");
        enemy.recieveDamage(enemy.getDamageTaken());
        if(enemy.getHealth() > 0)
        {
        //System.out.println("The " + enemy.getName() + " has " + enemy.getHealth() + " remaining.");
        }
        setMana(getMana() - 10);
        if(enemy.getHealth() > 0)
        {
        System.out.println(this.getName() + " has " + this.getMana() + " mana left.");
        }
        }
        else
        {
            System.out.println("Not enough mana!");
        }
   }
   
   public void useItem(int slot)
        {
            //a overriding use item method to use mana potions
            int place = slot - 1;
            if(inventory[place].equals("Health_Potion"))
            {
                int newHealth = getHealth() + 20;
                if(newHealth > ogHp)
                {
                setHealth(ogHp);
            }
            else
            {
                setHealth(newHealth);
            }
          System.out.println(getName() + " now has  " + getHealth() + " health.");
          inventory[place] = "empty";
        }
        else if(inventory[place].equals("Damage_Potion"))
        {
            setMaxDamage(getMaxDamage() + 10);
            inventory[place] = "empty";
            System.out.println(getName() + " can do more damge.");
        }
        else
        {
            System.out.println("That inventory slot is empty!");
        }
        
        if(inventory[place].equals("Mana_Potion"))
        {
            setMana(getMana()+10);
            System.out.println(getName() + "'s mana is restored to " + getMana());
            inventory[place] = "empty";
        }
        else
        {
            System.out.println("That inventory slot is empty!");
        }
        
        
    }
   
   public int getMana()
   {
       return mana;    
   }
   
   public void setMana(int value)
   {
       mana = value;
       if(mana < 0)
       {
           mana = 0;
       }
   }
}

