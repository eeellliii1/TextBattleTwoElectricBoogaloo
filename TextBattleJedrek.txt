public class Player {
    String name;
    public int health;
    public int maxHealth;
    public double minDamage;
    public double maxDamage;
    public int damage = (int) (Math.random()*(maxDamage -(maxDamage-minDamage))+1);
    public Player(String newName, int newHealth, double newMinDamage, double newMaxDamage) {
        this.name = newName;
        this.health = newHealth;
        this.maxHealth = newHealth;
        this.minDamage = newMinDamage;
        this.maxDamage = newMaxDamage;
    }
    public boolean checkAlive() {
        if(health > 0) {
            return true;
        } else {
            return false;
        }
    }
    public String getName() {
        return this.name;
    }
    public int getHealth() {
        return this.health;
    }
    public double getMinDamage() {
        return this.minDamage;
    }
    public double getMaxDamage() {
        return this.maxDamage;
    }
    public void setName(String newName) {
        this.name = newName;
    }
    public void setHealth(int newHealth) {
        this.health = newHealth;
    }
    public void setMinDamage(int newMinDamage) {
        this.minDamage = newMinDamage;
    }
    public void setMaxDamage(int newMaxDamage) {
        this.maxDamage = newMaxDamage;
    }
    public void receiveDamage(int damage) {
        if(health - damage < 0) {
            health = 0;
        } else { 
            health -= damage;
        }
        System.out.println(name + " has " + health + " health left.");
    }
    public void healthCheck(Hero person) {
        System.out.println(person.name + " has " + person.health + " health left.");
    }
    public void attack(Player enemy) {
        int theDamage = (int) (minDamage + ((Math.random()*(maxDamage-minDamage))+1));
        enemy.health -= theDamage;
        System.out.println(name + " attacks the " + enemy.name + " doing " + theDamage + " damage.");
    }
}

public class Hero extends Player {
    public String items[] = new String[3];
    public boolean isAlive = true;
    public Hero(String name, int health, double minDamage, double maxDamage, String[] newItems) {
        super(name, health, minDamage, maxDamage);
        this.items = newItems;
    }
    public void useItem(int choice) {
        if(choice == 1) {
            if("health potion".equals(items[choice-1])) {
                if(health + 20 > maxHealth) {
                    health = maxHealth;
                } else {
                    health += 20;
                }
                items[0] = "empty";
                System.out.println(name + " devours the potion, bottle and all.");
                System.out.println(name +" now has " + health + " health.");
            }
            else if("damage potion".equals(items[choice-1])) {
                maxDamage += 10;
                items[0] = "empty";
                System.out.println(name +" can do more damages!");
            }
            else if("empty".equals(items[choice-1])) {
                items[0] = "empty";
                System.out.println("What are you doing, there's nothing there");
            }
        } else if(choice == 2) {
            if("health potion".equals(items[choice-1])) {
                if(health + 20 > maxHealth) {
                    health = maxHealth;
                } else {
                    health += 20;
                }
                items[1] = "empty";
                System.out.println(name + " devours the potion, bottle and all.");
                System.out.println(name +" now has " + health + " health.");
            }
            else if("damage potion".equals(items[choice-1])) {
                maxDamage += 10;
                items[1] = "empty";
                System.out.println(name +" can do more damages!");
            }
            else if("empty".equals(items[choice-1])) {
                items[1] = "empty";
                System.out.println("What are you doing, there's nothing there");
            }
        } else if(choice == 3) {
            if("health potion".equals(items[choice-1])) {
                if(health + 20 > maxHealth) {
                    health = maxHealth;
                } else {
                    health += 20;
                }
                items[2] = "empty";
                System.out.println(name + " devours the potion, bottle and all.");
                System.out.println(name +" now has " + health + " health.");
            }
            else if("damage potion".equals(items[choice-1])) {
                maxDamage += 10;
                items[2] = "empty";
                System.out.println(name +" can do more damages!");
            }
            else if("empty".equals(items[choice-1])) {
                items[2] = "empty";
                System.out.println("What are you doing, there's nothing there");
            }
        }
    }
    public void show_inventory() {
        System.out.println("Your inventory holds: 1. "+items[0]+" 2. "+items[1]+" 3. "+items[2]);
    }
}

import java.util.Scanner;

public class Battle {
    public static String name;
    public static int classChoice = 1;
    public static int difficulty = 1;
    public static int round = 1;
    public static int action;
    public static void main(String[] args) {
        Scanner console = new Scanner(System.in);
        String[] inventory = new String[3];
        inventory[0] = "health potion";
        inventory[1] = "damage potion";
        inventory[2] = "mana potion";
        System.out.println("Enter your character's name:");
        name = console.nextLine();
        System.out.println("Choose your character's class (1 for Warrior)(2 for Mage)(3 for Rogue):");
        classChoice = console.nextInt();
        Hero person = new Hero(name, 10, 10, 20, inventory);
        if(classChoice == 1) {
            person = new Warrior(name, 80, 10, 20, inventory, 0.5);
        } else if(classChoice == 2) {
            person = new Mage(inventory, name, 60, 35, 45, 40); 
        } else if(classChoice == 3) {
            person = new Rogue(name, 70, 20, 30, inventory, 0.2);
        }
        System.out.println("Choose your difficulty level (1 for Easy)(2 for Normal)(3 for TheresNoChance):");
        difficulty = console.nextInt();
        Player enemy = new Player("I'm not supposed to exist", 10, 10, 10);
        if(difficulty == 1) {
            enemy = new Player("Steve Harvey", 60, 10, 20);
            System.out.println("You have chosen the easiest difficulty.");
            System.out.println("+++++++++++++++++++++++++ENEMY ENCOUNTER+++++++++++++++++++++++++");
            System.out.println("You have run into " + enemy.name + ", he strokes his moustache in excitement");
        } else if(difficulty == 2) {
            enemy = new Player("someone shady", 100, 20, 30); 
            System.out.println("You have chosen the normal difficulty.");
            System.out.println("+++++++++++++++++++++++++ENEMY ENCOUNTER+++++++++++++++++++++++++");
            System.out.println("You have run into " + enemy.name + ", he/she (no discrimination) puts their hood on and becomes shadier");
        } else if(difficulty == 3) {
            enemy = new Player("someone shadier than that last guy", 1001, 0, 60);
            System.out.println("See you in the afterlife.");
            System.out.println("+++++++++++++++++++++++++ENEMY ENCOUNTER+++++++++++++++++++++++++");
            System.out.println("There's no chance of running from " + enemy.name + ", run while you can.");
        }
        while(person.checkAlive() == true && enemy.checkAlive() == true) {
            System.out.println("+++++++++++++++++++++++++ROUND " + round +"+++++++++++++++++++++++++");
            person.show_inventory();
            System.out.println("Enter an inventory slot number or enter 0 to attack:");
            action = console.nextInt();
            if(action == 0) {
                person.attack(enemy);
            } else if(action == 1) {
                person.useItem(action);
            } else if(action == 2) {
                person.useItem(action);
            } else if(action == 3) {
                person.useItem(action);
            }
            enemy.attack(person);
            person.healthCheck(person);
            round += 1;
        }
        if(person.checkAlive() == false) {
            System.out.println(enemy.name + " has slain " + person.name + "!");
        } else if (enemy.checkAlive() == false) {
            System.out.println(person.name + " has slain " + enemy.name + "!");
        }
    }
}

public class Rogue extends Hero {
    double secondAttackChance;
    int theDamage;
    public Rogue(String name, int health, double minDamage, double maxDamage, String[] newItems, double secondChance) {
        super(name, health, minDamage, maxDamage, newItems);
        this.secondAttackChance = secondChance;
    }
    public void attack(Player enemy) {
        if((int) ((Math.random()*(1 - 0))+1) <= secondAttackChance) {
            theDamage = (int) (minDamage + ((Math.random()*(maxDamage-minDamage))+1));
            theDamage += (int) (minDamage + ((Math.random()*(maxDamage-minDamage))+1));
            enemy.health -= theDamage;
            System.out.println(name + " attacks two times!");
        } else {
            theDamage = (int) (minDamage + ((Math.random()*(maxDamage-minDamage))+1));
            enemy.health -= theDamage;
        }
        System.out.println(name + " attacks the " + enemy.name + " doing " + theDamage + " damage.");
        System.out.println(enemy.name + " has " + enemy.health + " health left");
    }
}

public class Mage extends Hero {
    int mana;
    public Mage(String[] startItems, String name, int health, double minDamage, double maxDamage, int startMana) {
        super(name, health, minDamage, maxDamage, startItems);
        this.mana = startMana;
    }
    public void attack(Player enemy) {
       if(mana <= 0) {
           System.out.println("Out of mana!");
           System.out.println("You couldn't do anything");
        } else {
            mana -= 10;
            int theDamage = (int) (minDamage + ((Math.random()*(maxDamage-minDamage))+1));
            enemy.health -= theDamage;
            System.out.println(name + " attacks the " + enemy.name + " doing " + theDamage + " damage.");
        }
        System.out.println(enemy.name + " has " + enemy.health + " health left");
    }
    public void useItem(int choice) {
        if("mana potion".equals(items[choice-1])) {
            mana += 30;
            System.out.println(name + " has recovered 30 mana!");
            items[choice-1] = "empty";
        } else {
            super.useItem(choice);
        }
    }
}
 
public class Warrior extends Hero {
    double critChance;
    int theDamage;
    public Warrior(String name, int health, double minDamage, double maxDamage, String[] newItems, double newCrit) {
        super(name, health, minDamage, maxDamage, newItems);
        this.critChance = newCrit;
    }
    public void attack(Player enemy) {
        if((int) ((Math.random()*9)+1) < 5) {
            theDamage = (int) (minDamage + ((Math.random()*(maxDamage-minDamage))+1));
            theDamage *= 2;
            enemy.health -= theDamage;
            System.out.println(name + " gets a crit!");
        } else {
            theDamage = (int) (minDamage + ((Math.random()*(maxDamage-minDamage))+1));
            enemy.health -= theDamage;
        }
        System.out.println(name + " attacks the " + enemy.name + " doing " + theDamage + " damage.");
        System.out.println(enemy.name + " has " + enemy.health + " health left");
    }
}

